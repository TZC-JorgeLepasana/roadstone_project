# Generated by Django 5.0.13 on 2025-04-10 21:48

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DailyMaterials',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('MaterialNo', models.IntegerField(blank=True, null=True)),
                ('MaterialName', models.CharField(blank=True, max_length=255, null=True)),
                ('Quantity', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'daily_materials',
            },
        ),
        migrations.CreateModel(
            name='DailyRecipes',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('RecipeNo', models.IntegerField(blank=True, null=True)),
                ('RecipeName', models.CharField(blank=True, max_length=255, null=True)),
                ('Total', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'daily_recipes',
            },
        ),
        migrations.CreateModel(
            name='OEEDailyData',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('TotalProduction', models.FloatField(blank=True, null=True)),
                ('TotalEmptyOut', models.FloatField(blank=True, null=True)),
                ('ProductionBatches', models.IntegerField(blank=True, null=True)),
                ('EmptyOutBatches', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'oee_daily_data',
            },
        ),
        migrations.CreateModel(
            name='ParsingTask',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('interrupted', 'Interrupted')], default='pending', max_length=20)),
                ('total_files', models.IntegerField(default=0)),
                ('processed_files_count', models.IntegerField(default=0)),
                ('current_file', models.CharField(blank=True, max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='PlantRunTime',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('MixingActive', models.FloatField(blank=True, null=True)),
                ('Mixer', models.FloatField(blank=True, null=True)),
                ('Screen', models.FloatField(blank=True, null=True)),
                ('HotElevator', models.FloatField(blank=True, null=True)),
                ('Dryer', models.FloatField(blank=True, null=True)),
                ('BurnerFlameOn', models.FloatField(blank=True, null=True)),
                ('SlingerForward', models.FloatField(blank=True, null=True)),
                ('SlingerReverse', models.FloatField(blank=True, null=True)),
                ('CollectConveyor', models.FloatField(blank=True, null=True)),
                ('DustBlower', models.FloatField(blank=True, null=True)),
                ('DustBlowerRotaryValve', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'plant_run_time',
            },
        ),
        migrations.CreateModel(
            name='BatchLog',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('BatchNo', models.IntegerField(db_index=True)),
                ('Time', models.DateTimeField(db_index=True)),
                ('JobNo', models.IntegerField(db_index=True)),
                ('RecipeNo', models.IntegerField(db_index=True)),
                ('RecipeName', models.CharField(blank=True, max_length=255, null=True)),
                ('Bitumen_Actual', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('Filler_Actual', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('Reclaim_Actual', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('Temperature_Actual', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('Bitumen_Target', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('Filler_Target', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('Reclaim_Target', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('Temperature_Target', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('HotBin1_Actual', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('HotBin1_Target', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('HotBin2_Actual', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('HotBin2_Target', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('HotBin3_Actual', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('HotBin3_Target', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('HotBin4_Actual', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('HotBin4_Target', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('HotBin5_Actual', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('HotBin5_Target', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('HotBin6_Actual', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('HotBin6_Target', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('HotBin7_Actual', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('HotBin7_Target', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('HotBin8_Actual', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('HotBin8_Target', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
            ],
            options={
                'db_table': 'BatchLogs',
                'managed': True,
                'indexes': [models.Index(fields=['Time'], name='BatchLogs_Time_b6267f_idx'), models.Index(fields=['RecipeName'], name='BatchLogs_RecipeN_7deaf9_idx')],
                'unique_together': {('BatchNo', 'Time', 'JobNo')},
            },
        ),
        migrations.CreateModel(
            name='EnergyData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, null=True)),
                ('meter_name', models.CharField(blank=True, max_length=100, null=True)),
                ('value', models.FloatField(blank=True, null=True)),
                ('consumption', models.FloatField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Energy Meter Data',
                'indexes': [models.Index(fields=['date', 'meter_name'], name='data_proces_date_998aa1_idx')],
            },
        ),
        migrations.CreateModel(
            name='ParsingSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('ftp_path', models.CharField(max_length=255)),
                ('frequency', models.CharField(choices=[('minutes', 'Minutes'), ('hours', 'Hours'), ('days', 'Days'), ('weeks', 'Weeks'), ('months', 'Months')], default='days', max_length=10)),
                ('every', models.PositiveIntegerField(default=1, help_text='Repeat every X [frequency]')),
                ('week_days', models.CharField(blank=True, help_text='Comma-separated days of week (0-6 where 0=Monday)', max_length=20)),
                ('day_of_month', models.PositiveSmallIntegerField(blank=True, help_text='Day of month (1-31)', null=True)),
                ('run_time', models.TimeField(default='00:00')),
                ('schedule_cron', models.CharField(blank=True, max_length=100, validators=[django.core.validators.RegexValidator(message='Invalid cron format', regex='^(\\*|([0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9])|\\*/([0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9])) (\\*|([0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9])|\\*/([0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9])) (\\*|([0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9])|\\*/([0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9])) (\\*|([0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9])|\\*/([0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9])) (\\*|([0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9])|\\*/([0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]))$')])),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProcessedFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_name', models.CharField(max_length=255)),
                ('file_type', models.CharField(choices=[('CSV', 'CSV'), ('XML', 'XML')], max_length=10)),
                ('file_path', models.CharField(max_length=255)),
                ('export_time', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('success', 'Success'), ('skipped', 'Skipped'), ('error', 'Error')], max_length=10)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('trigger_source', models.CharField(choices=[('manual', 'Manual'), ('scheduled', 'Scheduled')], default='manual', max_length=20)),
                ('schedule', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='data_processing.parsingschedule')),
                ('task', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='processed_files_rel', to='data_processing.parsingtask')),
            ],
            options={
                'ordering': ['-export_time'],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('Admin', 'Admin'), ('Manager', 'Manager'), ('Operator', 'Operator')], default='Operator', max_length=10)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
